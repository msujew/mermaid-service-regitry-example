import type { AstNode, DefaultSharedModuleContext, LangiumSharedServices, Module, ParseResult, PartialLangiumSharedServices, URI } from 'langium';
import { DefaultLangiumDocumentFactory, EmptyFileSystem, createDefaultModule, createDefaultSharedModule, inject } from 'langium';

import { InfoGeneratedModule, MermaidGeneratedSharedModule } from '../generated/module.js';
import { MermaidServiceRegistry, identifyFile } from './mermaidServiceRegistry.js';
import { InfoModule, InfoServices } from '../index.js';

class CustomDocumentsFactory extends DefaultLangiumDocumentFactory {
    protected override parse<T extends AstNode>(uri: URI, text: string): ParseResult<T> {
        const type = identifyFile(text);
        uri = uri.with({
            fragment: type
        });
        const services = this.serviceRegistry.getServices(uri);
        return services.parser.LangiumParser.parse<T>(text);
    }
}

export const MermaidSharedModule: Module<LangiumSharedServices, PartialLangiumSharedServices> = {
    ServiceRegistry: services => new MermaidServiceRegistry(services),
    workspace: {
        LangiumDocumentFactory: (services) => new CustomDocumentsFactory(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createMermaidServices(context: DefaultSharedModuleContext = EmptyFileSystem) {
  const shared: LangiumSharedServices = inject(
    createDefaultSharedModule(context),
    MermaidGeneratedSharedModule,
    MermaidSharedModule
  );
  const Info: InfoServices = inject(
    createDefaultModule({ shared }),
    InfoGeneratedModule,
    InfoModule
  );
  shared.ServiceRegistry.register(Info);
  return { Info, shared };
}
